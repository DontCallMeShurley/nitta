## NITTA UI REST API description

Autogenerated by `nitta-api-gen`

Expected port: 8080

Request helper with axios can be finded here: `rest_api.js`

Typescript interfaces can be finded here: `types.ts`

## GET /node/:sid

### Synthesis node inspection


### Get node info
(see: NITTA.Synthesis.Tree.Node)


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Example (`application/json`):

```javascript
{
    "score": 1032,
    "parameters": {
        "pOutputNumber": 2,
        "pAlternative": 1,
        "pWave": 2,
        "pAllowDataFlow": 1,
        "pCritical": false,
        "pPercentOfBindedInputs": 0.2,
        "pPossibleDeadlock": false,
        "pNumberOfBindedFunctions": 1,
        "pRestless": 0
    },
    "decision": {
        "function": {
            "fvHistory": [],
            "fvFun": "buffer(a) = b = c"
        },
        "tag": "BindDecisionView",
        "pu": "pu"
    },
    "duration": 0,
    "sid": "-0-1-3-1",
    "isTerminal": false,
    "isFinish": false
}
```

- Example (`application/json`):

```javascript
{
    "score": 1999,
    "parameters": {
        "pNotTransferableInputs": [
            0,
            0
        ],
        "pRestrictedTime": false,
        "pWaitTime": 1
    },
    "decision": {
        "tag": "DataflowDecisionView",
        "targets": [
            [
                "PU2",
                {
                    "epAt": [
                        1,
                        1
                    ],
                    "epRole": {
                        "tag": "Target",
                        "contents": "a2"
                    }
                }
            ]
        ],
        "source": [
            "PU1",
            {
                "epAt": [
                    1,
                    1
                ],
                "epRole": {
                    "tag": "Source",
                    "contents": [
                        "a1",
                        "a2"
                    ]
                }
            }
        ]
    },
    "duration": 0,
    "sid": "-0-1-3-1-5",
    "isTerminal": false,
    "isFinish": false
}
```

- Example (`application/json`):

```javascript
{
    "score": 5000,
    "parameters": [],
    "decision": {
        "tag": "BreakLoopView",
        "value": "12.5",
        "input": "c",
        "outputs": [
            "a",
            "b"
        ]
    },
    "duration": 0,
    "sid": "-0-1-3-1-6",
    "isTerminal": false,
    "isFinish": false
}
```

- Example (`application/json`):

```javascript
{
    "score": 1999,
    "parameters": [],
    "decision": {
        "old": [
            {
                "fvHistory": [],
                "fvFun": "a + b = c"
            },
            {
                "fvHistory": [],
                "fvFun": "c + d = e"
            }
        ],
        "tag": "OptimizeAccumView",
        "new": [
            {
                "fvHistory": [],
                "fvFun": "a + b + d = e"
            }
        ]
    },
    "duration": 0,
    "sid": "-0-1-3-1-5",
    "isTerminal": false,
    "isFinish": false
}
```

- Example (`application/json`):

```javascript
{
    "score": 1999,
    "parameters": [],
    "decision": {
        "tag": "ConstantFoldingView",
        "cRefOld": [
            {
                "fvHistory": [],
                "fvFun": "a = 1"
            },
            {
                "fvHistory": [],
                "fvFun": "b = 2"
            },
            {
                "fvHistory": [],
                "fvFun": "a + b = r"
            }
        ],
        "cRefNew": [
            {
                "fvHistory": [],
                "fvFun": "r = 3"
            }
        ]
    },
    "duration": 0,
    "sid": "-0-1-3-1-5",
    "isTerminal": false,
    "isFinish": false
}
```

## POST /node/:sid/allBestThreads

### SynthesisPractice is a set of small elements of the synthesis process.


### Explore all best synthesis threads from current and `deep` nested levels.


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### POST Parameters:

- deep
     - **Values**: *number*
     - **Description**: How many levels need to be explore.


### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- The synthesis node path from the root by edge indexes. (`application/json`):

```javascript
"-1-1-3"
```

## POST /node/:sid/allBindsAndRefsIO

### SynthesisPractice is a set of small elements of the synthesis process.


### Make all possible binds and refactorings


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- The synthesis node path from the root by edge indexes. (`application/json`):

```javascript
"-1-1-3"
```

## POST /node/:sid/bestStep

### SynthesisPractice is a set of small elements of the synthesis process.


### Make the best synthesis step by the objective function


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- The synthesis node path from the root by edge indexes. (`application/json`):

```javascript
"-1-1-3"
```

## GET /node/:sid/debug

### Synthesis node inspection


### Debuging interface to fast access to internal state (see NITTA.UIBackend.REST.Debug)


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Example (`application/json`):

```javascript
{
    "dbgPULocks": [],
    "dbgEndpointOptions": [],
    "dbgFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ],
    "dbgCurrentStateFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ]
}
```

- Example (`application/json`):

```javascript
{
    "dbgPULocks": [
        [
            "",
            []
        ]
    ],
    "dbgEndpointOptions": [],
    "dbgFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ],
    "dbgCurrentStateFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ]
}
```

- Example (`application/json`):

```javascript
{
    "dbgPULocks": [],
    "dbgEndpointOptions": [
        {
            "unitTag": "PU1",
            "unitEndpoints": [
                {
                    "epAt": {
                        "tcDuration": [
                            1,
                            1
                        ],
                        "tcAvailable": [
                            1,
                            10
                        ]
                    },
                    "epRole": {
                        "tag": "Target",
                        "contents": "x"
                    }
                }
            ]
        }
    ],
    "dbgFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ],
    "dbgCurrentStateFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ]
}
```

- Example (`application/json`):

```javascript
{
    "dbgPULocks": [
        [
            "",
            []
        ],
        [
            "",
            []
        ]
    ],
    "dbgEndpointOptions": [],
    "dbgFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ],
    "dbgCurrentStateFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ]
}
```

- Example (`application/json`):

```javascript
{
    "dbgPULocks": [
        [
            "",
            []
        ]
    ],
    "dbgEndpointOptions": [
        {
            "unitTag": "PU1",
            "unitEndpoints": [
                {
                    "epAt": {
                        "tcDuration": [
                            1,
                            1
                        ],
                        "tcAvailable": [
                            1,
                            10
                        ]
                    },
                    "epRole": {
                        "tag": "Target",
                        "contents": "x"
                    }
                }
            ]
        }
    ],
    "dbgFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ],
    "dbgCurrentStateFunctionLocks": [
        [
            "PU or function tag",
            [
                {
                    "locked": "b",
                    "lockBy": "a"
                }
            ]
        ]
    ]
}
```

## GET /node/:sid/endpoints

### Synthesis node inspection


### Enpoint options for all process units


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Example (`application/json`):

```javascript
[]
```

- Example (`application/json`):

```javascript
[
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    }
]
```

- Example (`application/json`):

```javascript
[
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    },
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    }
]
```

- Example (`application/json`):

```javascript
[
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    },
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    },
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    }
]
```

- Example (`application/json`):

```javascript
[
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    },
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    },
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    },
    {
        "unitTag": "PU1",
        "unitEndpoints": [
            {
                "epAt": {
                    "tcDuration": [
                        1,
                        1
                    ],
                    "tcAvailable": [
                        1,
                        10
                    ]
                },
                "epRole": {
                    "tag": "Target",
                    "contents": "x"
                }
            }
        ]
    }
]
```

## GET /node/:sid/history

### Synthesis tree navigation


### Get list of synthesis nodes from the root to the specific node


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Example (`application/json`):

```javascript
[]
```

- Example (`application/json`):

```javascript
[
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    }
]
```

- Example (`application/json`):

```javascript
[
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    },
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    }
]
```

- Example (`application/json`):

```javascript
[
    {
        "score": 1999,
        "parameters": {
            "pNotTransferableInputs": [
                0,
                0
            ],
            "pRestrictedTime": false,
            "pWaitTime": 1
        },
        "decision": {
            "tag": "DataflowDecisionView",
            "targets": [
                [
                    "PU2",
                    {
                        "epAt": [
                            1,
                            1
                        ],
                        "epRole": {
                            "tag": "Target",
                            "contents": "a2"
                        }
                    }
                ]
            ],
            "source": [
                "PU1",
                {
                    "epAt": [
                        1,
                        1
                    ],
                    "epRole": {
                        "tag": "Source",
                        "contents": [
                            "a1",
                            "a2"
                        ]
                    }
                }
            ]
        },
        "duration": 0,
        "sid": "-0-1-3-1-5",
        "isTerminal": false,
        "isFinish": false
    }
]
```

- Example (`application/json`):

```javascript
[
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    },
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    },
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    }
]
```

## GET /node/:sid/intermediateView

### Synthesis node inspection


### Intermidiate reperesentation of the current version of the algorithm


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Response body as below.

```javascript
{
    "edges": [
        {
            "to": 1,
            "from": 2,
            "fontAllign": "bottom",
            "edgeWidth": "2",
            "label": "x#0"
        },
        {
            "to": 2,
            "from": 1,
            "fontAllign": "bottom",
            "edgeWidth": "2",
            "label": "tmp_0#0"
        }
    ],
    "nodes": [
        {
            "function": "buffer(x#0) = tmp_0#0",
            "history": [],
            "nodeColor": "#cbbeb5",
            "nodeSize": "30",
            "fontSize": "20",
            "nodeShape": "box",
            "id": 1,
            "label": "r"
        },
        {
            "function": "Loop (X 0.000000) (O [x#0]) (I tmp_0#0)",
            "history": [],
            "nodeColor": "#cbbeb5",
            "nodeSize": "30",
            "fontSize": "20",
            "nodeShape": "box",
            "id": 2,
            "label": "loop(0.000000, tmp_0#0) = x#0"
        }
    ]
}
```

## GET /node/:sid/microarchitecture

### Synthesis node inspection


### Microarchitecture description


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Response body as below.

```javascript
{
    "ioSyncMode": "Sync",
    "networks": [
        {
            "networkTag": "net1",
            "units": [
                {
                    "unitTag": "fram1",
                    "unitType": "Fram"
                },
                {
                    "unitTag": "fram2",
                    "unitType": "Fram"
                },
                {
                    "unitTag": "shift",
                    "unitType": "Shift"
                }
            ],
            "valueType": "IntX 32"
        }
    ]
}
```

## GET /node/:sid/microarchitecture/:tag/process

### Synthesis node inspection


### Process Description for specific process unit


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)
- *tag*: Only process unit with specific tag

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- for process unit (`application/json`):

```javascript
{
    "relations": [
        {
            "vDown": 4,
            "tag": "Vertical",
            "vUp": 6
        },
        {
            "vDown": 2,
            "tag": "Vertical",
            "vUp": 6
        },
        {
            "vDown": 0,
            "tag": "Vertical",
            "vUp": 6
        },
        {
            "vDown": 5,
            "tag": "Vertical",
            "vUp": 4
        },
        {
            "vDown": 3,
            "tag": "Vertical",
            "vUp": 2
        },
        {
            "vDown": 1,
            "tag": "Vertical",
            "vUp": 0
        }
    ],
    "steps": [
        {
            "pInterval": [
                0,
                5
            ],
            "pID": 6,
            "pDesc": "Intermediate+x_0#0 +1@const#0 = x#0;"
        },
        {
            "pInterval": [
                4,
                4
            ],
            "pID": 5,
            "pDesc": "InstructionOut"
        },
        {
            "pInterval": [
                5,
                5
            ],
            "pID": 4,
            "pDesc": "EndpointSource x#0"
        },
        {
            "pInterval": [
                2,
                2
            ],
            "pID": 3,
            "pDesc": "InstructionLoad False"
        },
        {
            "pInterval": [
                2,
                2
            ],
            "pID": 2,
            "pDesc": "EndpointTarget 1@const#0"
        },
        {
            "pInterval": [
                1,
                1
            ],
            "pID": 1,
            "pDesc": "InstructionResetAndLoad False"
        },
        {
            "pInterval": [
                1,
                1
            ],
            "pID": 0,
            "pDesc": "EndpointTarget x_0#0"
        }
    ],
    "nextUid": 7,
    "nextTick_": 5
}
```

## POST /node/:sid/obviousBindThread

### SynthesisPractice is a set of small elements of the synthesis process.


### Make all possible oblivious binds


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- The synthesis node path from the root by edge indexes. (`application/json`):

```javascript
"-1-1-3"
```

## GET /node/:sid/parentEdge

### Synthesis tree navigation


### Get edge to the parent


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Example (`application/json`):

```javascript
null
```

- Example (`application/json`):

```javascript
{
    "score": 1032,
    "parameters": {
        "pOutputNumber": 2,
        "pAlternative": 1,
        "pWave": 2,
        "pAllowDataFlow": 1,
        "pCritical": false,
        "pPercentOfBindedInputs": 0.2,
        "pPossibleDeadlock": false,
        "pNumberOfBindedFunctions": 1,
        "pRestless": 0
    },
    "decision": {
        "function": {
            "fvHistory": [],
            "fvFun": "buffer(a) = b = c"
        },
        "tag": "BindDecisionView",
        "pu": "pu"
    },
    "duration": 0,
    "sid": "-0-1-3-1",
    "isTerminal": false,
    "isFinish": false
}
```

- Example (`application/json`):

```javascript
{
    "score": 1999,
    "parameters": {
        "pNotTransferableInputs": [
            0,
            0
        ],
        "pRestrictedTime": false,
        "pWaitTime": 1
    },
    "decision": {
        "tag": "DataflowDecisionView",
        "targets": [
            [
                "PU2",
                {
                    "epAt": [
                        1,
                        1
                    ],
                    "epRole": {
                        "tag": "Target",
                        "contents": "a2"
                    }
                }
            ]
        ],
        "source": [
            "PU1",
            {
                "epAt": [
                    1,
                    1
                ],
                "epRole": {
                    "tag": "Source",
                    "contents": [
                        "a1",
                        "a2"
                    ]
                }
            }
        ]
    },
    "duration": 0,
    "sid": "-0-1-3-1-5",
    "isTerminal": false,
    "isFinish": false
}
```

- Example (`application/json`):

```javascript
{
    "score": 5000,
    "parameters": [],
    "decision": {
        "tag": "BreakLoopView",
        "value": "12.5",
        "input": "c",
        "outputs": [
            "a",
            "b"
        ]
    },
    "duration": 0,
    "sid": "-0-1-3-1-6",
    "isTerminal": false,
    "isFinish": false
}
```

- Example (`application/json`):

```javascript
{
    "score": 1999,
    "parameters": [],
    "decision": {
        "old": [
            {
                "fvHistory": [],
                "fvFun": "a + b = c"
            },
            {
                "fvHistory": [],
                "fvFun": "c + d = e"
            }
        ],
        "tag": "OptimizeAccumView",
        "new": [
            {
                "fvHistory": [],
                "fvFun": "a + b + d = e"
            }
        ]
    },
    "duration": 0,
    "sid": "-0-1-3-1-5",
    "isTerminal": false,
    "isFinish": false
}
```

## GET /node/:sid/process

### Synthesis node inspection


### Process Description for specific process unit


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- for process unit (`application/json`):

```javascript
{
    "relations": [
        {
            "vDown": 4,
            "tag": "Vertical",
            "vUp": 6
        },
        {
            "vDown": 2,
            "tag": "Vertical",
            "vUp": 6
        },
        {
            "vDown": 0,
            "tag": "Vertical",
            "vUp": 6
        },
        {
            "vDown": 5,
            "tag": "Vertical",
            "vUp": 4
        },
        {
            "vDown": 3,
            "tag": "Vertical",
            "vUp": 2
        },
        {
            "vDown": 1,
            "tag": "Vertical",
            "vUp": 0
        }
    ],
    "steps": [
        {
            "pInterval": [
                0,
                5
            ],
            "pID": 6,
            "pDesc": "Intermediate+x_0#0 +1@const#0 = x#0;"
        },
        {
            "pInterval": [
                4,
                4
            ],
            "pID": 5,
            "pDesc": "InstructionOut"
        },
        {
            "pInterval": [
                5,
                5
            ],
            "pID": 4,
            "pDesc": "EndpointSource x#0"
        },
        {
            "pInterval": [
                2,
                2
            ],
            "pID": 3,
            "pDesc": "InstructionLoad False"
        },
        {
            "pInterval": [
                2,
                2
            ],
            "pID": 2,
            "pDesc": "EndpointTarget 1@const#0"
        },
        {
            "pInterval": [
                1,
                1
            ],
            "pID": 1,
            "pDesc": "InstructionResetAndLoad False"
        },
        {
            "pInterval": [
                1,
                1
            ],
            "pID": 0,
            "pDesc": "EndpointTarget x_0#0"
        }
    ],
    "nextUid": 7,
    "nextTick_": 5
}
```

## GET /node/:sid/processTimelines

### Synthesis node inspection


### Computational process representation (deprecated)


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- No response body

## POST /node/:sid/simpleSynthesis

### Synthesis methods is a method for full synthesis tree exploration. Usually, it is more complicated than synthesis practice, but it is not an essential difference.


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- The synthesis node path from the root by edge indexes. (`application/json`):

```javascript
"-1-1-3"
```

## POST /node/:sid/smartBindSynthesisIO

### Synthesis methods is a method for full synthesis tree exploration. Usually, it is more complicated than synthesis practice, but it is not an essential difference.


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- The synthesis node path from the root by edge indexes. (`application/json`):

```javascript
"-1-1-3"
```

## POST /node/:sid/stateOfTheArtSynthesisIO

### Synthesis methods is a method for full synthesis tree exploration. Usually, it is more complicated than synthesis practice, but it is not an essential difference.


### Composition of all available synthesis methods


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- The synthesis node path from the root by edge indexes. (`application/json`):

```javascript
"-1-1-3"
```

## GET /node/:sid/subForest

### Synthesis tree navigation


### Get sub forest


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Example (`application/json`):

```javascript
[]
```

- Example (`application/json`):

```javascript
[
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    }
]
```

- Example (`application/json`):

```javascript
[
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    },
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    }
]
```

- Example (`application/json`):

```javascript
[
    {
        "score": 1999,
        "parameters": {
            "pNotTransferableInputs": [
                0,
                0
            ],
            "pRestrictedTime": false,
            "pWaitTime": 1
        },
        "decision": {
            "tag": "DataflowDecisionView",
            "targets": [
                [
                    "PU2",
                    {
                        "epAt": [
                            1,
                            1
                        ],
                        "epRole": {
                            "tag": "Target",
                            "contents": "a2"
                        }
                    }
                ]
            ],
            "source": [
                "PU1",
                {
                    "epAt": [
                        1,
                        1
                    ],
                    "epRole": {
                        "tag": "Source",
                        "contents": [
                            "a1",
                            "a2"
                        ]
                    }
                }
            ]
        },
        "duration": 0,
        "sid": "-0-1-3-1-5",
        "isTerminal": false,
        "isFinish": false
    }
]
```

- Example (`application/json`):

```javascript
[
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    },
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    },
    {
        "score": 1032,
        "parameters": {
            "pOutputNumber": 2,
            "pAlternative": 1,
            "pWave": 2,
            "pAllowDataFlow": 1,
            "pCritical": false,
            "pPercentOfBindedInputs": 0.2,
            "pPossibleDeadlock": false,
            "pNumberOfBindedFunctions": 1,
            "pRestless": 0
        },
        "decision": {
            "function": {
                "fvHistory": [],
                "fvFun": "buffer(a) = b = c"
            },
            "tag": "BindDecisionView",
            "pu": "pu"
        },
        "duration": 0,
        "sid": "-0-1-3-1",
        "isTerminal": false,
        "isFinish": false
    }
]
```

## POST /node/:sid/testbench

### Get the report of testbench execution for the current node.


### Captures:

- *nId*: Synthesis node ID (see NITTA.Synthesis.Tree.NId)

### POST Parameters:

- pName
     - **Values**: *string*
     - **Description**: Project name

- loopsNumber
     - **Values**: *number*
     - **Description**: How many computation cycles need to simulate.


### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Response body as below.

```javascript
{
    "tbLogicalSimulationLog": [
        {
            "tmp_0#0": 0,
            "u#0": 0,
            "x#0": 0
        },
        {
            "tmp_0#0": 0,
            "u#0": 0,
            "x#0": 0
        }
    ],
    "tbStatus": true,
    "tbSynthesisSteps": [
        "Step {pID = 19, pInterval = 0 ... 0, pDesc = Nested fram2: Step {pID = 0, pInterval = 0 ... 0, pDesc = bind Loop (X 0.000000) (O [x#0]) (I tmp_0#0)}}",
        "Step {pID = 18, pInterval = 0 ... 0, pDesc = Nested fram2: Step {pID = 1, pInterval = 0 ... 0, pDesc = revoke Loop (X 0.000000) (O [x#0]) (I tmp_0#0)}}",
        "Step {pID = 17, pInterval = 0 ... 0, pDesc = Nested fram2: Step {pID = 2, pInterval = 0 ... 0, pDesc = bind LoopBegin (Loop (X 0.000000) (O [x#0]) (I tmp_0#0)) (O [x#0])}}",
        "Step {pID = 16, pInterval = 0 ... 0, pDesc = Nested fram2: Step {pID = 3, pInterval = 0 ... 0, pDesc = bind LoopEnd (Loop (X 0.000000) (O [x#0]) (I tmp_0#0)) (I tmp_0#0)}}",
        "Step {pID = 15, pInterval = 1 ... 1, pDesc = Nested fram2: Step {pID = 4, pInterval = 1 ... 1, pDesc = Source x#0}}",
        "Step {pID = 14, pInterval = 0 ... 0, pDesc = Nested fram2: Step {pID = 5, pInterval = 0 ... 0, pDesc = PrepareRead 0}}",
        "Step {pID = 13, pInterval = 0 ... 1, pDesc = Nested fram2: Step {pID = 6, pInterval = 0 ... 1, pDesc = LoopBegin (Loop (X 0.000000) (O [x#0]) (I tmp_0#0)) (O [x#0])}}",
        "Step {pID = 12, pInterval = 4 ... 4, pDesc = Nested fram2: Step {pID = 7, pInterval = 4 ... 4, pDesc = Target tmp_0#0}}",
        "Step {pID = 11, pInterval = 4 ... 4, pDesc = Nested fram2: Step {pID = 8, pInterval = 4 ... 4, pDesc = Write 0}}",
        "Step {pID = 10, pInterval = 4 ... 4, pDesc = Nested fram2: Step {pID = 9, pInterval = 4 ... 4, pDesc = LoopEnd (Loop (X 0.000000) (O [x#0]) (I tmp_0#0)) (I tmp_0#0)}}",
        "Step {pID = 9, pInterval = 0 ... 0, pDesc = Nested fram1: Step {pID = 0, pInterval = 0 ... 0, pDesc = bind buffer(x#0) = tmp_0#0}}",
        "Step {pID = 8, pInterval = 1 ... 1, pDesc = Nested fram1: Step {pID = 1, pInterval = 1 ... 1, pDesc = Target x#0}}",
        "Step {pID = 7, pInterval = 1 ... 1, pDesc = Nested fram1: Step {pID = 2, pInterval = 1 ... 1, pDesc = Write 0}}",
        "Step {pID = 6, pInterval = 4 ... 4, pDesc = Nested fram1: Step {pID = 3, pInterval = 4 ... 4, pDesc = Source tmp_0#0}}",
        "Step {pID = 5, pInterval = 3 ... 3, pDesc = Nested fram1: Step {pID = 4, pInterval = 3 ... 3, pDesc = PrepareRead 0}}",
        "Step {pID = 4, pInterval = 1 ... 4, pDesc = Nested fram1: Step {pID = 5, pInterval = 1 ... 4, pDesc = buffer(x#0) = tmp_0#0}}",
        "Step {pID = 3, pInterval = 4 ... 4, pDesc = Transport \"tmp_0#0\" \"fram1\" \"fram2\"}",
        "Step {pID = 2, pInterval = 1 ... 1, pDesc = Transport \"x#0\" \"fram2\" \"fram1\"}",
        "Step {pID = 1, pInterval = 0 ... 0, pDesc = bind reg(x#0) = tmp_0#0}",
        "Step {pID = 0, pInterval = 0 ... 0, pDesc = bind Loop (X 0.000000) (O [x#0]) (I tmp_0#0)}"
    ],
    "tbPath": "/Users/penskoi/Documents/nitta-corp/nitta/gen/web_ui",
    "tbFunctionalSimulationLog": [
        {
            "tmp_0#0": 0,
            "u#0": 0,
            "x#0": 0
        },
        {
            "tmp_0#0": 0,
            "u#0": 0,
            "x#0": 0
        }
    ],
    "tbCompilerDump": "stdout:\nstderr:\n",
    "tbFunctions": [
        "buffer(x#0) = tmp_0#0",
        "LoopEnd (Loop (X 0.000000) (O [x#0]) (I tmp_0#0)) (I tmp_0#0)",
        "LoopBegin (Loop (X 0.000000) (O [x#0]) (I tmp_0#0)) (O [x#0])"
    ],
    "tbFiles": [
        "web_ui_net/web_ui_net.v",
        "lib/div/div_mock.v",
        "lib/div/pu_div.v",
        "lib/i2c/bounce_filter.v",
        "lib/i2c/buffer.v",
        "lib/multiplier/mult_mock.v",
        "lib/multiplier/pu_multiplier.v",
        "lib/spi/pu_slave_spi_driver.v",
        "lib/spi/spi_slave_driver.v",
        "lib/spi/i2n_splitter.v",
        "lib/spi/spi_master_driver.v",
        "lib/spi/n2i_splitter.v",
        "lib/spi/pu_slave_spi.v",
        "lib/spi/pu_master_spi.v",
        "lib/pu_accum.v",
        "lib/pu_fram.v",
        "lib/pu_shift.v",
        "lib/pu_simple_control.v",
        "web_ui_net_tb.v"
    ],
    "tbSimulationDump": "stdout:\nVCD info: dumpfile web_ui_net_tb.vcd opened for output.\n0:0\tactual: 0.000  0\t\n0:1\tactual: 0.000  0 \texpect: 0.000  0 \tvar: x#0\t\n0:2\tactual: 0.000  0\t\n0:3\tactual: 0.000  0\t\n0:4\tactual: 0.000  0 \texpect: 0.000  0 \tvar: tmp_0#0\t\n0:5\tactual: 0.000  0\t\n1:0\tactual: 0.000  0\t\n1:1\tactual: 0.000  0 \texpect: 0.000  0 \tvar: x#0\t\n1:2\tactual: 0.000  0\t\n1:3\tactual: 0.000  0\t\n1:4\tactual: 0.000  0 \texpect: 0.000  0 \tvar: tmp_0#0\t\n1:5\tactual: 0.000  0\t\nstderr:\n"
}
```

## GET /synthesisTree

### Get whole synthesis tree


### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Response body as below.

```javascript
{
    "subForest": [
        {
            "subForest": [],
            "rootLabel": {
                "score": 4052,
                "isProcessed": false,
                "duration": 0,
                "sid": "-0",
                "isTerminal": false,
                "isFinish": false,
                "decsionType": "Bind"
            }
        },
        {
            "subForest": [],
            "rootLabel": {
                "score": 3021,
                "isProcessed": false,
                "duration": 0,
                "sid": "-1",
                "isTerminal": false,
                "isFinish": false,
                "decsionType": "Bind"
            }
        }
    ],
    "rootLabel": {
        "score": null,
        "isProcessed": true,
        "duration": 0,
        "sid": "-",
        "isTerminal": false,
        "isFinish": false,
        "decsionType": "-"
    }
}
```

## GET /treeInfo

### Get synthesis tree info


### Response:

- Status code 200
- Headers: []

- Supported content types are:

    - `application/json`

- Response body as below.

```javascript
{
    "notProcessed": 0,
    "durationSuccess": {},
    "success": 0,
    "stepsSuccess": {},
    "nodes": 0,
    "failed": 0
}
```

